---
description: 
globs: 
alwaysApply: false
---
# Troubleshooting Guide - Known Issues and Solutions

## Critical Issues and Fixes Applied

### 1. Filter Function Parameter Mismatch ✅ FIXED
**Problem**: Room list filtering not working due to API parameter inconsistencies
**Symptoms**: 
- Filter controls appear to work but return no filtered results
- Backend logs show unrecognized filter parameters

**Root Cause**: Frontend sends `minCapacity`/`maxCapacity` but backend expects `capacityMin`/`capacityMax`

**Solution Applied**:
```javascript
// Fixed in frontend/pages/roomList/roomList.js
const params = {
  capacityMin: filters.minCapacity,  // Changed from minCapacity
  capacityMax: filters.maxCapacity,  // Changed from maxCapacity
  equipment: filters.equipment.join(',')
};
```

**Files Modified**: 
- [frontend/pages/roomList/roomList.js](mdc:frontend/pages/roomList/roomList.js)

### 2. Navigation Bar Icon Overlap ✅ FIXED
**Problem**: Custom navigation icons overlap with WeChat's system buttons
**Symptoms**: 
- Icons in upper right corner not clickable
- Visual overlap with WeChat share/close buttons

**Root Cause**: Hardcoded positioning without considering WeChat capsule button location

**Solution Applied**:
```javascript
// Dynamic positioning calculation
onLoad() {
  const systemInfo = wx.getSystemInfoSync();
  const menuButton = wx.getMenuButtonBoundingClientRect();
  
  this.setData({
    statusBarHeight: systemInfo.statusBarHeight,
    navBarHeight: (menuButton.top - systemInfo.statusBarHeight) * 2 + menuButton.height,
    menuButtonInfo: menuButton
  });
}
```

**Files Modified**: 
- [frontend/pages/roomList/roomList.js](mdc:frontend/pages/roomList/roomList.js)
- [frontend/pages/roomList/roomList.wxml](mdc:frontend/pages/roomList/roomList.wxml)

### 3. GlobalData Undefined Error ✅ FIXED
**Problem**: "Cannot read property 'globalData' of undefined" on app launch
**Symptoms**: 
- Error occurs randomly on app initialization
- Pages load before app.js completes initialization

**Root Cause**: Race condition where page `onLoad` executes before app initialization

**Solution Applied**:
```javascript
// Safe global data access with retry mechanism
function safeGetAppData() {
  try {
    const app = getApp();
    if (app && app.globalData) {
      return app.globalData;
    }
  } catch (error) {
    console.error('Error accessing app data:', error);
  }
  
  // Return default configuration
  return {
    baseUrl: 'https://www.cacophonyem.me/meeting',
    userInfo: null
  };
}
```

**Files Modified**: 
- [frontend/pages/roomList/roomList.js](mdc:frontend/pages/roomList/roomList.js)
- [frontend/pages/roomDetail/roomDetail.js](mdc:frontend/pages/roomDetail/roomDetail.js)
- [frontend/pages/admin/admin.js](mdc:frontend/pages/admin/admin.js)

### 4. Attendee Count Display Issue ✅ FIXED
**Problem**: Admin page always shows attendee count as 1
**Symptoms**: 
- User inputs different numbers but display always shows 1
- Form submission works correctly but display is wrong

**Root Cause**: Field name inconsistency between JS (`attendeeCount`) and WXML (`attendeesCount`)

**Solution Applied**:
```javascript
// Unified field naming throughout codebase
// Changed all instances to use 'attendeesCount' (plural)
this.setData({
  'bookingForm.attendeesCount': e.detail.value
});
```

**Files Modified**: 
- [frontend/pages/admin/admin.js](mdc:frontend/pages/admin/admin.js)

## Common Deployment Issues

### 5. Nginx 502 Bad Gateway (Partially Resolved)
**Problem**: API requests return 502 errors when accessing via domain
**Symptoms**: 
- Direct server access works (localhost:3000)
- Domain access fails (https://www.cacophonyem.me/meeting/api/)

**Root Cause**: Nginx proxy configuration issues

**Solutions to Try**:
1. Check Nginx port configuration (should be 3000, not 3001)
2. Verify PM2 process is running: `pm2 status`
3. Check Nginx error logs: `tail -f /var/log/nginx/error.log`
4. Restart services: `sudo systemctl restart nginx`

**Configuration Files**: 
- [meeting-nginx-fixed.conf](mdc:meeting-nginx-fixed.conf)

### 6. WeChat Mini-Program Domain Configuration
**Problem**: API requests fail in production mini-program
**Symptoms**: 
- Development tools work fine
- Published version cannot connect to API

**Solution Checklist**:
1. Add domain to WeChat Console:
   - Go to https://mp.weixin.qq.com
   - Navigate to: 开发管理 → 开发设置 → 服务器域名
   - Add `www.cacophonyem.me` to request合法域名
2. Ensure HTTPS is properly configured
3. Verify SSL certificate validity

## Debugging Best Practices

### Frontend Debugging
```javascript
// Add comprehensive logging
console.log('Page data:', this.data);
console.log('API request:', { url, params });
console.log('API response:', res);

// Use WeChat debugging tools
wx.showModal({
  title: 'Debug Info',
  content: JSON.stringify(debugData, null, 2)
});
```

### Backend Debugging
```javascript
// Structured logging
console.log(`[${new Date().toISOString()}] API Request:`, {
  method: req.method,
  url: req.url,
  params: req.params,
  query: req.query,
  body: req.body
});

// Error context logging
console.error('Database Error:', {
  error: error.message,
  stack: error.stack,
  context: { userId, roomId, operation }
});
```

### Network Issues Debugging
1. **Check API Health**: `curl https://www.cacophonyem.me/meeting/api/health`
2. **Verify SSL**: `openssl s_client -connect www.cacophonyem.me:443`
3. **Test Local API**: `curl http://localhost:3000/api/health`
4. **Check Process Status**: `pm2 status && pm2 logs`

## Performance Optimization Tips

### Frontend Optimization
- Use `wx:if` instead of `hidden` for conditional rendering
- Implement proper data binding to avoid unnecessary re-renders
- Cache API responses when appropriate
- Use proper page lifecycle management

### Backend Optimization
- Add database indexes for frequently queried fields
- Implement proper error handling to avoid crashes
- Use connection pooling for database connections
- Add request rate limiting for production

## Preventive Measures

### Code Quality
1. **Consistent Naming**: Use standardized field names across frontend/backend
2. **Error Handling**: Always implement try-catch blocks for async operations
3. **Input Validation**: Validate all user inputs on both frontend and backend
4. **Logging**: Add comprehensive logging for debugging

### Testing Checklist
1. Test all filter combinations in room list
2. Verify navigation bar positioning on different devices
3. Test app initialization under various network conditions
4. Validate form submissions with edge case data
5. Test API endpoints directly before frontend integration
