---
description: 
globs: 
alwaysApply: false
---
# WeChat Mini-Program Development Patterns

## WeChat API Usage Patterns

### Authentication Flow
```javascript
// Standard WeChat login pattern used in utils/auth.js
wx.login({
  success: (res) => {
    if (res.code) {
      // Send code to backend for openid exchange
      wx.request({
        url: `${config.baseUrl}/api/user/wechat-login`,
        method: 'POST',
        data: { code: res.code, nickname: userInfo.nickName },
        success: (response) => {
          // Store user info in global data
          app.globalData.userInfo = response.data.user;
        }
      });
    }
  }
});
```

### Safe Global Data Access Pattern
```javascript
// Pattern implemented to fix GlobalData undefined errors
function safeGetAppData() {
  try {
    const app = getApp();
    if (app && app.globalData) {
      return app.globalData;
    }
  } catch (error) {
    console.error('Error accessing app data:', error);
  }
  // Return default configuration
  return {
    baseUrl: 'https://www.cacophonyem.me/meeting',
    userInfo: null
  };
}
```

### Navigation Bar Safe Positioning
```javascript
// Pattern to avoid overlap with WeChat system buttons
onLoad() {
  const systemInfo = wx.getSystemInfoSync();
  const menuButton = wx.getMenuButtonBoundingClientRect();
  
  this.setData({
    statusBarHeight: systemInfo.statusBarHeight,
    navBarHeight: (menuButton.top - systemInfo.statusBarHeight) * 2 + menuButton.height,
    menuButtonInfo: menuButton
  });
}
```

## Page Lifecycle Patterns

### Standard Page Structure
Every page should follow this pattern:
```javascript
Page({
  data: {
    // Page-specific data
  },
  
  onLoad(options) {
    // Initialize page data
    // Get navigation bar measurements if needed
    // Load initial data
  },
  
  onShow() {
    // Refresh data when page becomes visible
    // Check login status
  },
  
  onReady() {
    // Page ready callbacks
  }
});
```

### API Request Pattern
```javascript
// Standard API request with error handling
wx.request({
  url: `${app.globalData.baseUrl}/api/endpoint`,
  method: 'GET',
  header: {
    'Content-Type': 'application/json'
  },
  success: (res) => {
    if (res.statusCode === 200) {
      // Handle success
      this.setData({ data: res.data });
    } else {
      // Handle API errors
      wx.showToast({
        title: '请求失败',
        icon: 'none'
      });
    }
  },
  fail: (error) => {
    // Handle network errors
    console.error('API request failed:', error);
    wx.showToast({
      title: '网络错误',
      icon: 'none'
    });
  }
});
```

## Data Binding Conventions

### Field Name Consistency
- Use consistent field names across frontend and backend
- Example: `attendeesCount` (not `attendeeCount`) for consistency
- Use plural forms for count fields: `attendeesCount`, `roomsCount`

### Multi-ID Support Pattern
```html
<!-- Support multiple possible ID fields for robustness -->
<view wx:for="{{rooms}}" 
      wx:key="index" 
      data-room-id="{{item.id || item.roomId || item._id}}"
      bindtap="viewRoomDetail">
```

### Form Data Handling
```javascript
// Standard form submission pattern
onSubmit(e) {
  const formData = e.detail.value;
  
  // Validate required fields
  if (!formData.roomId || !formData.date) {
    wx.showToast({
      title: '请填写必填信息',
      icon: 'none'
    });
    return;
  }
  
  // Submit to API
  this.submitBooking(formData);
}
```

## Error Handling Best Practices

### User-Friendly Error Messages
- Always show meaningful error messages to users
- Use `wx.showToast()` for brief notifications
- Use `wx.showModal()` for important errors requiring user action

### Logging Pattern
```javascript
// Comprehensive logging for debugging
console.log('Debug info:', { context: 'relevant data' });
console.error('Error occurred:', error);
console.warn('Warning:', 'potential issue description');
```

## CSS/WXSS Conventions

### Responsive Design
- Use `rpx` units for responsive sizing
- Consider different screen sizes and densities
- Test on various device types

### Navigation Bar Styling
```css
/* Safe area for custom navigation elements */
.nav-bar {
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000;
  background: #fff;
}

.nav-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0 20rpx;
}
```
